"""
Enhanced TradingView Style Liquidity Heatmap
DetaylÄ± likidite haritasÄ± ve analiz
"""

import matplotlib
matplotlib.use('Agg')

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Rectangle
import matplotlib.colors as mcolors
import numpy as np
import pandas as pd
from io import BytesIO
import requests
from datetime import datetime
from utils.binance_api import get_binance_ohlc

# TradingView renk paleti
COLORS = {
    'bg': '#131722',           # TradingView arka plan
    'bg_secondary': '#1e222d',
    'grid': '#363a45',
    'text': '#b2b5be',
    'text_bright': '#e1e4ea',
    'green': '#26a69a',         # TradingView yeÅŸil
    'red': '#ef5350',           # TradingView kÄ±rmÄ±zÄ±
    'blue': '#2196f3',
    'yellow': '#ffeb3b',
    'purple': '#ab47bc',
    'orange': '#ff9800',
    'liquidity_high': '#2962ff',  # YÃ¼ksek likidite - mavi
    'liquidity_mid': '#00bcd4',   # Orta likidite - cyan
    'liquidity_low': '#1e88e5',   # DÃ¼ÅŸÃ¼k likidite - aÃ§Ä±k mavi
}

class EnhancedLiquidityMap:
    def __init__(self):
        self.session = requests.Session()
        self.liquidity_analysis = {}
        
    def get_binance_depth(self, symbol="BTCUSDT", limit=1000):
        """Binance order book verisi - daha fazla veri"""
        try:
            url = f"https://api.binance.com/api/v3/depth"
            params = {"symbol": symbol, "limit": limit}
            response = self.session.get(url, params=params, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                return {
                    'bids': [(float(price), float(qty)) for price, qty in data.get('bids', [])],
                    'asks': [(float(price), float(qty)) for price, qty in data.get('asks', [])]
                }
        except Exception as e:
            print(f"Depth error: {e}")
        return {'bids': [], 'asks': []}
    
    def get_current_price(self, symbol="BTCUSDT"):
        """GÃ¼ncel fiyat"""
        try:
            url = f"https://api.binance.com/api/v3/ticker/price"
            response = self.session.get(url, params={"symbol": symbol}, timeout=5)
            if response.status_code == 200:
                return float(response.json()['price'])
        except:
            pass
        return None
    
    def calculate_liquidity_levels(self, depth, current_price, price_range_pct=0.05):
        """GeliÅŸtirilmiÅŸ likidite seviye hesaplama"""
        levels = []
        
        # Daha geniÅŸ fiyat aralÄ±ÄŸÄ± (%5 yukarÄ±/aÅŸaÄŸÄ±)
        price_range = current_price * price_range_pct
        min_price = current_price - price_range
        max_price = current_price + price_range
        
        # Daha fazla seviye (50 seviye)
        num_levels = 50
        price_levels = np.linspace(min_price, max_price, num_levels)
        
        # Her seviye iÃ§in likidite hesapla
        for price_level in price_levels:
            bid_liquidity = 0
            ask_liquidity = 0
            
            # YakÄ±nlÄ±k threshold'u
            threshold = price_range / num_levels * 1.5
            
            # Bid likiditesi
            for bid_price, bid_qty in depth['bids']:
                distance = abs(bid_price - price_level)
                if distance < threshold:
                    # Mesafeye gÃ¶re aÄŸÄ±rlÄ±klandÄ±r
                    weight = 1 - (distance / threshold)
                    bid_liquidity += bid_qty * weight
            
            # Ask likiditesi
            for ask_price, ask_qty in depth['asks']:
                distance = abs(ask_price - price_level)
                if distance < threshold:
                    weight = 1 - (distance / threshold)
                    ask_liquidity += ask_qty * weight
            
            total_liquidity = bid_liquidity + ask_liquidity
            
            levels.append({
                'price': price_level,
                'liquidity': total_liquidity,
                'bid_liquidity': bid_liquidity,
                'ask_liquidity': ask_liquidity,
                'type': 'support' if price_level < current_price else 'resistance',
                'distance_pct': ((price_level - current_price) / current_price) * 100
            })
        
        # Likiditeye gÃ¶re sÄ±rala
        levels = sorted(levels, key=lambda x: x['liquidity'], reverse=True)
        
        # En gÃ¼Ã§lÃ¼ seviyeleri kaydet (analiz iÃ§in)
        self.liquidity_analysis = {
            'above': [l for l in levels if l['price'] > current_price][:5],
            'below': [l for l in levels if l['price'] < current_price][:5],
            'strongest': levels[0] if levels else None,
            'current_price': current_price
        }
        
        return levels
    
    def get_analysis_text(self):
        """Likidite analiz metni oluÅŸtur"""
        if not self.liquidity_analysis:
            return ""
        
        analysis = self.liquidity_analysis
        current_price = analysis['current_price']
        
        # En yÃ¼ksek likidite deÄŸeri (normalizasyon iÃ§in)
        all_levels = analysis['above'] + analysis['below']
        if not all_levels:
            return ""
        
        max_liquidity = max(l['liquidity'] for l in all_levels)
        
        text = f"ðŸ’§ **Likidite Analizi**\n\n"
        text += f"ðŸ’° **GÃ¼ncel Fiyat:** ${current_price:,.2f}\n\n"
        
        # YukarÄ±daki likidite
        text += "ðŸ“ˆ **YukarÄ±da YÃ¼ksek Likidite:**\n"
        for level in analysis['above'][:3]:
            strength = (level['liquidity'] / max_liquidity) * 100
            emoji = "ðŸ”¥" if strength >= 60 else "âš¡" if strength >= 30 else "ðŸ’«"
            text += f"   {emoji} ${level['price']:,.0f} (+%{abs(level['distance_pct']):.1f}, GÃ¼Ã§: %{strength:.0f})\n"
        
        # AÅŸaÄŸÄ±daki likidite
        text += "\nðŸ“‰ **AÅŸaÄŸÄ±da YÃ¼ksek Likidite:**\n"
        for level in analysis['below'][:3]:
            strength = (level['liquidity'] / max_liquidity) * 100
            emoji = "ðŸ”¥" if strength >= 60 else "âš¡" if strength >= 30 else "ðŸ’«"
            text += f"   {emoji} ${level['price']:,.0f} (-%{abs(level['distance_pct']):.1f}, GÃ¼Ã§: %{strength:.0f})\n"
        
        # En yÃ¼ksek likidite
        if analysis['strongest']:
            strongest = analysis['strongest']
            direction = "ðŸ“ˆ YukarÄ±da" if strongest['price'] > current_price else "ðŸ“‰ AÅŸaÄŸÄ±da"
            text += f"\nâš¡ **En YÃ¼ksek Likidite:** ${strongest['price']:,.0f} ({direction})\n"
        
        return text

def create_ultra_modern_liquidity_heatmap(symbol="BTCUSDT", timeframe="1h"):
    """GeliÅŸtirilmiÅŸ TradingView tarzÄ± likidite haritasÄ±"""
    try:
        # Veri hazÄ±rlÄ±k
        liq = EnhancedLiquidityMap()
        current_price = liq.get_current_price(symbol)
        
        if not current_price:
            return None, None
        
        # OHLC verisi - daha fazla bar
        df = get_binance_ohlc(symbol, interval=timeframe, limit=150)
        if df is None or df.empty:
            return None, None
        
        # Order book - maksimum derinlik
        depth = liq.get_binance_depth(symbol, 1000)
        
        # Likidite seviyeleri - %5 aralÄ±k
        liquidity_levels = liq.calculate_liquidity_levels(depth, current_price, 0.05)
        
        # Figure oluÅŸtur - TradingView tarzÄ±
        fig = plt.figure(figsize=(18, 10), facecolor=COLORS['bg'])
        
        # Ana grafik
        ax = plt.subplot(111)
        ax.set_facecolor(COLORS['bg'])
        
        # 1. CANDLESTICK GRAFÄ°K
        draw_candlestick_chart(ax, df)
        
        # 2. LÄ°KÄ°DÄ°TE SEVÄ°YELERÄ° (yatay Ã§izgiler)
        draw_liquidity_levels(ax, liquidity_levels, current_price)
        
        # 3. VOLUME PROFILE (saÄŸ taraf) - geliÅŸtirilmiÅŸ
        draw_enhanced_volume_profile(ax, df, depth, current_price)
        
        # 4. ORDER BOOK DUVAR GÃ–STERGESÄ°
        draw_order_walls(ax, depth, current_price, len(df))
        
        # 5. MEVCUT FÄ°YAT Ã‡Ä°ZGÄ°SÄ°
        ax.axhline(y=current_price, color=COLORS['yellow'], 
                  linewidth=2.5, linestyle='-', alpha=1, zorder=10)
        
        # Mevcut fiyat etiketi
        ax.text(len(df) + 0.5, current_price, f'  ${current_price:,.2f}', 
               color=COLORS['yellow'], fontweight='bold', 
               fontsize=11, va='center',
               bbox=dict(boxstyle="round,pad=0.4", 
                        facecolor=COLORS['bg_secondary'], 
                        edgecolor=COLORS['yellow'], alpha=0.95))
        
        # BaÅŸlÄ±k
        ax.set_title(f'{symbol} - Enhanced Liquidity Map & Volume Profile', 
                    fontsize=15, color=COLORS['text_bright'], 
                    fontweight='bold', pad=20)
        
        # Y ekseni (fiyat)
        ax.set_ylabel('Price (USDT)', color=COLORS['text'], fontsize=12)
        ax.yaxis.set_label_position('right')
        ax.yaxis.tick_right()
        
        # Y ekseni formatÄ±
        ax.yaxis.set_major_formatter(plt.FuncFormatter(
            lambda x, p: f'{x:,.0f}' if x >= 1 else f'{x:.6f}'
        ))
        
        # X ekseni
        ax.set_xlabel('Time', color=COLORS['text'], fontsize=12)
        
        # Grid - TradingView tarzÄ±
        ax.grid(True, color=COLORS['grid'], alpha=0.3, 
               linewidth=0.5, linestyle='-')
        
        # Eksenleri ayarla - daha geniÅŸ gÃ¶rÃ¼nÃ¼m
        price_range = current_price * 0.05  # %5 aralÄ±k
        ax.set_ylim(current_price - price_range, current_price + price_range)
        ax.set_xlim(-5, len(df) + 15)
        
        # Tick renkleri
        ax.tick_params(colors=COLORS['text'], labelsize=10)
        
        # KenarlÄ±klarÄ± Ã¶zelleÅŸtir
        for spine in ax.spines.values():
            spine.set_color(COLORS['grid'])
            spine.set_linewidth(0.5)
        
        # Legend
        from matplotlib.patches import Patch
        legend_elements = [
            Patch(facecolor=COLORS['liquidity_high'], alpha=0.4, label='High Liquidity Zone'),
            Patch(facecolor=COLORS['liquidity_mid'], alpha=0.3, label='Medium Liquidity'),
            Patch(facecolor=COLORS['green'], alpha=0.5, label='Buy Walls'),
            Patch(facecolor=COLORS['red'], alpha=0.5, label='Sell Walls')
        ]
        ax.legend(handles=legend_elements, loc='upper left', 
                 facecolor=COLORS['bg_secondary'], 
                 edgecolor=COLORS['grid'],
                 fontsize=10, framealpha=0.95)
        
        plt.tight_layout()
        
        # Grafik kaydet
        img = BytesIO()
        plt.savefig(img, format='png', dpi=120, 
                   bbox_inches='tight',
                   facecolor=COLORS['bg'], 
                   edgecolor='none')
        img.seek(0)
        plt.close()
        
        # Analiz metni
        analysis_text = liq.get_analysis_text()
        
        return img, analysis_text
        
    except Exception as e:
        print(f"Liquidity heatmap error: {e}")
        plt.close()
        return None, None

def draw_candlestick_chart(ax, df):
    """TradingView tarzÄ± candlestick Ã§iz"""
    for i in range(len(df)):
        row = df.iloc[i]
        
        # Renk belirleme
        if row['close'] >= row['open']:
            body_color = COLORS['green']
            wick_color = COLORS['green']
        else:
            body_color = COLORS['red']
            wick_color = COLORS['red']
        
        # Wick (high-low)
        ax.plot([i, i], [row['low'], row['high']], 
               color=wick_color, linewidth=1, alpha=0.7, zorder=1)
        
        # Body (open-close)
        height = abs(row['close'] - row['open'])
        bottom = min(row['close'], row['open'])
        
        # Body rectangle
        if height > 0:  # Doji deÄŸilse
            rect = Rectangle((i - 0.3, bottom), 0.6, height,
                           facecolor=body_color, 
                           edgecolor=body_color,
                           alpha=0.8, 
                           linewidth=0,
                           zorder=2)
            ax.add_patch(rect)

def draw_liquidity_levels(ax, levels, current_price):
    """GeliÅŸtirilmiÅŸ likidite seviyeleri"""
    
    # En yÃ¼ksek likidite deÄŸeri
    max_liquidity = max(level['liquidity'] for level in levels) if levels else 1
    
    # Her seviye iÃ§in Ã§izgi Ã§iz (daha fazla seviye)
    for level in levels[:30]:  # En Ã¶nemli 30 seviye
        price = level['price']
        liquidity = level['liquidity']
        normalized = liquidity / max_liquidity
        
        # Likiditeye gÃ¶re renk ve kalÄ±nlÄ±k
        if normalized > 0.7:
            color = COLORS['liquidity_high']
            linewidth = 2.5
            alpha = 0.5
        elif normalized > 0.4:
            color = COLORS['liquidity_mid']
            linewidth = 1.8
            alpha = 0.4
        elif normalized > 0.2:
            color = COLORS['liquidity_low']
            linewidth = 1.2
            alpha = 0.3
        else:
            color = COLORS['liquidity_low']
            linewidth = 0.8
            alpha = 0.2
        
        # Yatay Ã§izgi
        ax.axhline(y=price, color=color, linewidth=linewidth, 
                  alpha=alpha, linestyle='-', zorder=0)
        
        # Ã–nemli seviyelere etiket ekle
        if normalized > 0.5:
            distance_pct = abs((price - current_price) / current_price)
            if distance_pct > 0.003 and distance_pct < 0.05:  # %0.3 - %5 arasÄ±
                ax.text(-1, price, f'${price:.0f}', 
                       color=color, fontsize=9, 
                       va='center', ha='right', alpha=0.8,
                       fontweight='bold' if normalized > 0.7 else 'normal')

def draw_enhanced_volume_profile(ax, df, depth, current_price):
    """GeliÅŸtirilmiÅŸ volume profile - Ã¼st ve alt tam kapsama"""
    
    # Daha geniÅŸ fiyat aralÄ±ÄŸÄ±
    price_range = current_price * 0.05  # %5
    min_price = current_price - price_range
    max_price = current_price + price_range
    
    # Daha fazla seviye
    num_levels = 40
    price_levels = np.linspace(min_price, max_price, num_levels)
    
    # Her seviye iÃ§in volume hesapla
    volume_profile = []
    order_book_profile = []
    
    for price_level in price_levels:
        # Historical volume
        level_volume = 0
        for _, row in df.iterrows():
            if row['low'] <= price_level <= row['high']:
                # Fiyata yakÄ±nlÄ±ÄŸa gÃ¶re aÄŸÄ±rlÄ±klandÄ±r
                distance = min(abs(row['high'] - price_level), 
                             abs(row['low'] - price_level),
                             abs(row['close'] - price_level))
                weight = 1 / (1 + distance / 100)
                level_volume += row['volume'] * weight
        
        # Order book volume
        order_volume = 0
        threshold = price_range / num_levels * 2
        
        for bid_price, bid_qty in depth['bids']:
            if abs(bid_price - price_level) < threshold:
                order_volume += bid_qty
        
        for ask_price, ask_qty in depth['asks']:
            if abs(ask_price - price_level) < threshold:
                order_volume += ask_qty
        
        volume_profile.append(level_volume)
        order_book_profile.append(order_volume)
    
    # Normalize
    max_volume = max(volume_profile) if volume_profile else 1
    max_order = max(order_book_profile) if order_book_profile else 1
    
    # Volume barlarÄ±nÄ± Ã§iz
    bar_start = len(df) + 2
    bar_width = 10
    
    for i, (price_level, volume, order_vol) in enumerate(zip(price_levels, volume_profile, order_book_profile)):
        if volume > 0 or order_vol > 0:
            # Historical volume bar
            if volume > 0:
                normalized = volume / max_volume
                width = normalized * bar_width * 0.6
                
                color = COLORS['green'] if price_level < current_price else COLORS['red']
                
                rect = Rectangle((bar_start, price_level - (price_range/num_levels/2)), 
                               width, price_range/num_levels,
                               facecolor=color, 
                               alpha=0.3,
                               edgecolor=color,
                               linewidth=0.5,
                               zorder=3)
                ax.add_patch(rect)
            
            # Order book bar (overlay)
            if order_vol > 0:
                normalized = order_vol / max_order
                width = normalized * bar_width * 0.4
                
                color = COLORS['blue']
                
                rect = Rectangle((bar_start + (bar_width * 0.6), 
                                price_level - (price_range/num_levels/2)), 
                               width, price_range/num_levels,
                               facecolor=color, 
                               alpha=0.4,
                               edgecolor=color,
                               linewidth=0,
                               zorder=4)
                ax.add_patch(rect)

def draw_order_walls(ax, depth, current_price, x_offset):
    """BÃ¼yÃ¼k order duvarlarÄ±nÄ± gÃ¶ster"""
    
    # En bÃ¼yÃ¼k bid/ask duvarlarÄ± bul
    if depth['bids'] and depth['asks']:
        bid_walls = sorted(depth['bids'], key=lambda x: x[1], reverse=True)[:5]
        ask_walls = sorted(depth['asks'], key=lambda x: x[1], reverse=True)[:5]
        
        # DuvarlarÄ± iÅŸaretle
        for bid_price, bid_qty in bid_walls:
            if abs(bid_price - current_price) / current_price < 0.05:  # %5 iÃ§inde
                # YeÅŸil ok (destek)
                ax.annotate('', xy=(x_offset-10, bid_price), 
                          xytext=(x_offset-5, bid_price),
                          arrowprops=dict(arrowstyle='->', color=COLORS['green'], 
                                        lw=2, alpha=0.7))
        
        for ask_price, ask_qty in ask_walls:
            if abs(ask_price - current_price) / current_price < 0.05:  # %5 iÃ§inde
                # KÄ±rmÄ±zÄ± ok (direnÃ§)
                ax.annotate('', xy=(x_offset-10, ask_price), 
                          xytext=(x_offset-5, ask_price),
                          arrowprops=dict(arrowstyle='->', color=COLORS['red'], 
                                        lw=2, alpha=0.7))

def format_liquidity_caption(symbol, analysis_text=None):
    """GeliÅŸtirilmiÅŸ likidite haritasÄ± caption"""
    
    base_caption = f"""
ðŸ’§ **{symbol} Enhanced Liquidity Analysis**

ðŸ“Š **Grafik AÃ§Ä±klamasÄ±:**
â€¢ **Mavi Ã‡izgiler:** YÃ¼ksek likidite bÃ¶lgeleri
â€¢ **Cyan Ã‡izgiler:** Orta likidite
â€¢ **SarÄ± Ã‡izgi:** Mevcut fiyat
â€¢ **SaÄŸdaki Barlar:** Volume profili + Order book
â€¢ **Oklar:** BÃ¼yÃ¼k alÄ±m/satÄ±m duvarlarÄ±

ðŸŽ¯ **KullanÄ±m Ä°puÃ§larÄ±:**
â€¢ KalÄ±n mavi Ã§izgiler = GÃ¼Ã§lÃ¼ destek/direnÃ§
â€¢ YeÅŸil oklar = BÃ¼yÃ¼k alÄ±m emirleri
â€¢ KÄ±rmÄ±zÄ± oklar = BÃ¼yÃ¼k satÄ±m emirleri
"""
    
    if analysis_text:
        return analysis_text + "\n" + base_caption
    
    return base_caption

print("ðŸ’§ Enhanced TradingView Style Liquidity Map yÃ¼klendi!")
